name: Build and Push Docker Image

on:
  workflow_run:
    workflows: ["Security"]
    types:
      - completed
  release:
    types: [published]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    if: ${{ (github.event.workflow_run.conclusion == 'success' && github.event.workflow_run.head_branch == 'dev') || (github.event_name == 'release' && github.event.action == 'published') }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.workflow_run.head_branch || github.ref }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=sha,prefix={{branch}}-
            type=raw,value=dev,enable=${{ github.event.workflow_run.head_branch == 'dev' || github.ref == 'refs/heads/dev' }}
            type=raw,value=latest,enable=${{ github.event.workflow_run.head_branch == 'main' || github.ref == 'refs/heads/main' || github.event_name == 'release' }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Notify Telegram
        if: always()
        run: |
          STATUS=${{ job.status }}
          MESSAGE="🐳 Docker build & push $STATUS - Image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}, Branch: ${{ github.ref_name || github.event.workflow_run.head_branch }}"
          curl -s -X POST "https://api.telegram.org/bot${{ secrets.TELEGRAM_BOT_TOKEN }}/sendMessage" \
            -d chat_id=${{ secrets.TELEGRAM_CHAT_ID }} \
            -d parse_mode=Markdown \
            -d text="$MESSAGE"

  deploy:
    needs: build-and-push
    runs-on: ubuntu-latest
    if: ${{ (github.event.workflow_run.conclusion == 'success' && github.event.workflow_run.head_branch == 'main') || (github.event_name == 'release' && github.event.action == 'published') }}
    environment: production

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.workflow_run.head_branch || github.ref }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          cache: 'pnpm'

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: latest

      - name: Install dependencies
        run: pnpm install

      - name: Build application
        run: pnpm build

      - name: Generate Prisma client
        run: pnpm prisma generate

      - name: Run database migrations
        run: pnpm prisma migrate deploy

      - name: Create docker-compose override for production with external database
        run: |
          cat > docker-compose.external-db.yml << EOF
          version: '3.8'
          services:
            app:
              image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
              ports:
                - "3000:3000"
              environment:
                - DATABASE_URL=\${DATABASE_URL}
                - JWT_SECRET=\${JWT_SECRET}
                - NODE_ENV=production
              restart: unless-stopped
              networks:
                - bits-network
          
          networks:
            bits-network:
              name: bits-network
              external: true
          EOF

      - name: Deploy using Docker Compose with external database
        run: docker compose -f docker-compose.yml -f docker-compose.external-db.yml up -d --remove-orphans

      - name: Notify Telegram
        if: always()
        run: |
          STATUS=${{ job.status }}
          MESSAGE="🚀 Deployment BERHASIL! (Menggunakan database eksternal) - Branch: (${{ github.ref_name || github.event.workflow_run.head_branch }})"
          if [ "$STATUS" != "success" ]; then
            MESSAGE="❌ Deployment GAGAL! - Branch: (${{ github.ref_name || github.event.workflow_run.head_branch }}), Lihat log: [GitHub Actions](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})"
          fi
          curl -s -X POST "https://api.telegram.org/bot${{ secrets.TELEGRAM_BOT_TOKEN }}/sendMessage" \
            -d chat_id=${{ secrets.TELEGRAM_CHAT_ID }} \
            -d parse_mode=Markdown \
            -d text="$MESSAGE"