name: Build and Push Docker Image

on:
  workflow_run:
    workflows: ["Release"]
    types: [completed]
  release:
    types: [published]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    if: >
      (github.event_name == 'workflow_run' &&
      github.event.workflow_run.conclusion == 'success' &&
      github.event.workflow_run.name == 'Release' &&
      github.event.workflow_run.head_branch == 'main') ||
      (github.event_name == 'release' &&
      github.event.action == 'published')

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: ${{ github.event.workflow_run.head_branch || github.ref }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GHCR
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract Docker metadata (tags & labels)
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            # Untuk release tag (v1.2.3)
            type=ref,event=tag
            # Tag "latest" untuk release & main
            type=raw,value=latest,enable=${{ github.event_name == 'release' || github.event.workflow_run.head_branch == 'main' || github.ref == 'refs/heads/main' }}
            # Commit SHA dengan prefix branch
            type=sha,prefix=${{ github.event.workflow_run.head_branch || github.ref_name }}-

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Notify Telegram
        if: always()
        run: |
          STATUS=${{ job.status }}
          BRANCH=${{ github.event.workflow_run.head_branch || github.ref_name }}
          if [ "$STATUS" == "success" ]; then
            MESSAGE="üê≥ *Docker Build & Push BERHASIL!*\nImage: \`${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}\`\nBranch/Tag: *$BRANCH*"
          else
            MESSAGE="üö® *Docker Build & Push GAGAL!*\nRepo: *${{ github.repository }}*\nBranch/Tag: *$BRANCH*\n[üìú Lihat Log](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})"
          fi
          curl -s -X POST "https://api.telegram.org/bot${{ secrets.TELEGRAM_BOT_TOKEN }}/sendMessage" \
            -d chat_id="${{ secrets.TELEGRAM_CHAT_ID }}" \
            -d parse_mode="Markdown" \
            -d text="$MESSAGE"

  deploy:
    needs: build-and-push
    runs-on: ubuntu-latest
    if: >
      (github.event_name == 'workflow_run' &&
      github.event.workflow_run.conclusion == 'success' &&
      github.event.workflow_run.name == 'Release' &&
      github.event.workflow_run.head_branch == 'main') ||
      (github.event_name == 'release' &&
      github.event.action == 'published')

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.workflow_run.head_branch || github.ref }}

      - name: Install Docker Compose
        run: |
          sudo apt-get update
          sudo apt-get install -y docker-compose

      - name: Create docker-compose
        run: |
          cat > docker-compose.test.yml << 'EOF'
          version: '3.8'
          services:
            app:
              image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
              environment:
                - DATABASE_URL=postgresql://postgres:postgres@postgres:5432/cao
                - JWT_SECRET=${JWT_SECRET}
                - NODE_ENV=production
              depends_on:
                - postgres
              restart: unless-stopped
            postgres:
              image: postgres:16-alpine
              environment:
                - POSTGRES_DB=cao
                - POSTGRES_USER=postgres
                - POSTGRES_PASSWORD=postgres
              volumes:
                - postgres_data:/var/lib/postgresql/data
              healthcheck:
                test: ["CMD-SHELL", "pg_isready -U postgres"]
                interval: 10s
                timeout: 5s
                retries: 5
              restart: unless-stopped
          volumes:
            postgres_data:
          EOF

      - name: Deploy using Docker Compose
        run: |
          if [ ! -f docker-compose.yml ]; then
            echo "‚ö†Ô∏è Tidak ada docker-compose.yml utama, membuat default..."
            echo "version: '3.8'\nservices:\n  app:\n    image: alpine:latest" > docker-compose.yml
          fi
          docker compose -f docker-compose.yml -f docker-compose.test.yml up -d --remove-orphans

      - name: Notify Telegram
        if: always()
        run: |
          STATUS=${{ job.status }}
          BRANCH=${{ github.event.workflow_run.head_branch || github.ref_name }}
          if [ "$STATUS" == "success" ]; then
            MESSAGE="üöÄ *Deployment BERHASIL*\nBranch/Tag: *$BRANCH*\nImage: \`${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest\`"
          else
            MESSAGE="‚ùå *Deployment GAGAL!*\nBranch/Tag: *$BRANCH*\n[üìú Lihat Log](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})"
          fi
          curl -s -X POST "https://api.telegram.org/bot${{ secrets.TELEGRAM_BOT_TOKEN }}/sendMessage" \
            -d chat_id="${{ secrets.TELEGRAM_CHAT_ID }}" \
            -d parse_mode="Markdown" \
            -d text="$MESSAGE"
