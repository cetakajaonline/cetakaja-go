name: Security

on:
  push:
    branches: [ main, dev ]
  pull_request:
    branches: [ main, dev ]
  schedule:
    - cron: '0 0 * * 1' # Setiap Senin
  workflow_dispatch:

jobs:
  security-check:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20.x

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: latest

      - name: Verify pnpm
        run: pnpm -v

      - name: Restore pnpm cache
        uses: actions/cache@v4
        with:
          path: ~/.pnpm-store
          key: ${{ runner.os }}-pnpm-${{ hashFiles('pnpm-lock.yaml') }}

      - name: Install dependencies
        run: pnpm install

      - name: Run linter
        run: pnpm lint

      - name: Run type checking
        run: pnpm check

      - name: Generate Prisma client
        run: pnpm prisma generate
        env:
          DATABASE_URL: postgresql://test:test@localhost:5432/test

      - name: Run Prisma schema validation
        run: pnpm prisma validate
        env:
          DATABASE_URL: postgresql://test:test@localhost:5432/test

      - name: Build application
        run: pnpm build
        env:
          DATABASE_URL: postgresql://test:test@localhost:5432/test

      - name: Run dependency review
        uses: actions/dependency-review-action@v3
        if: github.event_name == 'pull_request'

      # --- CodeQL Security Analysis ---
      - name: Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: javascript

      - name: Run CodeQL Analysis
        uses: github/codeql-action/analyze@v3

      # --- TruffleHog v3 Secret Scanning ---
      - name: Install TruffleHog v3
        run: |
          pip install --upgrade --force-reinstall trufflehog3
          trufflehog3 --version

      - name: Run TruffleHog Secret Scan
        run: |
          mkdir -p results
          echo "🔍 Menjalankan TruffleHog scan..."
          trufflehog3 filesystem . --format json > results/trufflehog-results.json || true
          trufflehog3 convert-to-sarif results/trufflehog-results.json --output results/trufflehog-results.sarif || true
          echo "✅ TruffleHog scan selesai. Hasil disimpan di results/"

      - name: Upload TruffleHog SARIF
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: results/trufflehog-results.sarif

      # --- npm/pnpm audit (non-blocking) ---
      - name: Run npm/pnpm audit
        run: pnpm audit --audit-level=high || true

      # --- Telegram Notification ---
      - name: Notify Telegram
        if: always()
        run: |
          STATUS=${{ job.status }}
          if [ "$STATUS" == "success" ]; then
            MESSAGE="✅ *Security workflow BERHASIL*\nRepo: *${{ github.repository }}*\nBranch: *${{ github.ref_name }}*\nCommit: [${{ github.sha }}](https://github.com/${{ github.repository }}/commit/${{ github.sha }})"
          else
            MESSAGE="🚨 *Security workflow GAGAL!*\nRepo: *${{ github.repository }}*\nBranch: *${{ github.ref_name }}*\nCommit: [${{ github.sha }}](https://github.com/${{ github.repository }}/commit/${{ github.sha }})\nLihat log: [GitHub Actions Logs](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})"
          fi
          curl -s -X POST "https://api.telegram.org/bot${{ secrets.TELEGRAM_BOT_TOKEN }}/sendMessage" \
            -d chat_id=${{ secrets.TELEGRAM_CHAT_ID }} \
            -d parse_mode=Markdown \
            -d text="$MESSAGE"
